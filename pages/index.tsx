import type { NextPage } from 'next'
import React, { useState, useEffect } from "react";
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import Link from "next/link";
import { IconBug, IconX } from '@tabler/icons-react';
// import MyLayout from "../layouts/MyLayout";
import Header from "../components/Header";
// import Footer from "../components/Footer";
import SelectedApps from "../components/SelectedApps";
import AppCardGroup from "../components/AppCardGroup";

// let appData:appCardsType[] = []
/*
type appCardsType = {
  packageName:string,
  name:string,
  icon:string,
}
*/

type propsType = {
  onAdd:Function,
  onRemove:Function,
  onCheckSelected:Function,
  setSearchKeyword:Function,
  latestApps:{apps:appType[]},
  latestVersions:{apps:appType[]},
}

export default function Home(props:propsType) {

  var refTest = React.createRef();

    const [selectedApps, setSelectedApps] = useState<appType[]>([]);
    const [showBetaPopup, setShowBetaPopup] = useState(false);

    useEffect(() => {
    const popStatus = localStorage.getItem('hideBetaPopup');
    if (!popStatus) {
      setShowBetaPopup(true)
    }
   },[])

    const hidePopup = () => {
      // const stored = localStorage.getItem(key);
      setShowBetaPopup(false)
      localStorage.setItem('hideBetaPopup', 'true');
    }

    const betaPopup = showBetaPopup ? <div className='fixed bottom-5 right-5 dark:bg-zinc-900 border-emerald-600 border-2 p-4 rounded-md bg-zinc-200 z-30'>
    <p className='font-semibold'>v2.0 is live ðŸ¥³ </p>
    <p>Please make sure you&apos;re using<br />the latest version of the app</p>
    <IconX className='absolute right-2 top-2 cursor-pointer' onClick={hidePopup} />
  </div> : ''



    return (
        <div className={styles.container}>
            <Head>
                <title>Icon Pusher - A utility for Android icon pack developers</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className={styles.main}>
              <h1>Icon Pusher</h1>
              <div className='px-8'>
                <p>Icon Pusher is a resource for Android Icon Pack developers to get application details for setting up their icon packs.</p>
                <p>You can get the companion app for submitting apps from the Google Play Store:
                  <a href="https://play.google.com/store/apps/details?id=dev.southpaw.iconpusher&amp;pcampaignid=pcampaignidMKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1" target="_blank" rel="noreferrer" className="google-play-badge">
                    <Image alt="Get it on Google Play" src="https://play.google.com/intl/en_gb/badges/static/images/badges/en_badge_web_generic.png" width={208} height={80} className='w-52 m-auto' />
                  </a>
                </p>
              </div>
              <h2>Recently added apps</h2>
              <AppCardGroup
                appCards={props.latestApps.apps}
                useMax={false}
                onAdd={props.onAdd}
                onRemove={props.onRemove}
                onCheckSelected={props.onCheckSelected}
                setSearchKeyword={props.setSearchKeyword}
              />
              <h2>Recently updated apps</h2>
              <AppCardGroup
                appCards={props.latestVersions.apps}
                useMax={false}
                onAdd={props.onAdd}
                onRemove={props.onRemove}
                onCheckSelected={props.onCheckSelected}
                setSearchKeyword={props.setSearchKeyword}
              />
            </main>
            {betaPopup}
        </div>
    )
}

// This function gets called at build time
export async function getServerSideProps() {
    // Call an external API endpoint to get posts
    const res = await fetch('https://api.iconpusher.com/latest-new')
    const latest = await res.json()
    const latestApps = latest.apps
    const latestVersions = latest.versions

    // let's loop through the apps and mark any as selected
    // TODO ubove

    // By returning { props: { posts } }, the Blog component
    // will receive `posts` as a prop at build time
    return {
      props: {
        latestApps,
        latestVersions,
      },
    }
  }


// Home.Layout = MyLayout
