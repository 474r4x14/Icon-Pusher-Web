import type { NextPage } from 'next'
import React, { useState, useEffect } from "react";
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import Link from "next/link";
import { IconBug, IconX } from '@tabler/icons-react';
// import MyLayout from "../layouts/MyLayout";
import Header from "../components/Header";
// import Footer from "../components/Footer";
import SelectedApps from "../components/SelectedApps";
import AppCardGroup from "../components/AppCardGroup";

// let appData:appCardsType[] = []
/*
type appCardsType = {
  packageName:string,
  name:string,
  icon:string,
}
*/

type propsType = {
  selectedApps:appType[],
  onAdd:Function,
  onRemove:Function,
  onCheckSelected:Function,
  setSearchKeyword:Function,
  latest:{apps:appType[]},
}

export default function Home(props:propsType) {

  var refTest = React.createRef();

    const [selectedApps, setSelectedApps] = useState<appType[]>([]);

    useEffect(() => {
    const popStatus = localStorage.getItem('hideBetaPopup');
    if (!popStatus) {
    }
   },[])

    const hidePopup = () => {
      // const stored = localStorage.getItem(key);
      localStorage.setItem('hideBetaPopup', 'true');
    }

    var content = <p>There are no selected apps</p>
    if (props.selectedApps.length > 0) {
      content = <AppCardGroup
        appCards={props.selectedApps}
        useMax={false}
        onAdd={props.onAdd}
        onRemove={props.onRemove}
        onCheckSelected={props.onCheckSelected}
        setSearchKeyword={props.setSearchKeyword}
      />
    }

    return (
        <div className={styles.container}>
            <Head>
                <title>Icon Pusher - A utility for Android icon pack developers</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className={styles.main}>
              <h1>Selected Apps</h1>
                {content}
            </main>
        </div>
    )
}

// This function gets called at build time
export async function getServerSideProps() {
    // Call an external API endpoint to get posts
    const res = await fetch('https://api.iconpusher.com/latest')
    const latest = await res.json()

    // let's loop through the apps and mark any as selected
    // TODO ubove

    // By returning { props: { posts } }, the Blog component
    // will receive `posts` as a prop at build time
    return {
      props: {
        latest,
      },
    }
  }


// Home.Layout = MyLayout
